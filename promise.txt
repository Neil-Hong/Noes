const timer1 = setTimeout(() => {
  console.log('timer1');
  
  const promise1 = Promise.resolve().then(() => {
    console.log('promise1')
  })
}, 0)

const timer2 = setTimeout(() => {
  console.log('timer2')
}, 0)

=>timer1,promise1 (macrotask)
=>promise1 (microtask queue)
=>timer2(macrotask)

//timer1, promise1, timer2

-------------------------------------------------------------------------

console.log('start');

const promise1 = Promise.resolve().then(() => {
  console.log('promise1');
  const timer2 = setTimeout(() => {
    console.log('timer2')
  }, 0)
});

const timer1 = setTimeout(() => {
  console.log('timer1')
  const promise2 = Promise.resolve().then(() => {
    console.log('promise2')
  })
}, 0)

console.log('end');

=>start, end (synchronous)
=>promise1 (microtask)
=>timer1 (macrotask)
=>promise2 (microtask queue)
=>timer2 (macrotask queue)

//start, end, promise1, timer1, promise2, timer2

-------------------------------------------------------------------------

const promise = new Promise((resolve, reject) => {
  console.log(1);
  setTimeout(() => {
    console.log("timerStart");
    resolve("success");
    console.log("timerEnd");
  }, 0);
  console.log(2);
});

promise.then((res) => {
  console.log(res);
});

console.log(4);

=>1,2,4 (synchronous)
=>console.log(res) (microtask)   (pending)
=>timerStart, success, timerEnd (macrotask)
=>success (microtask)

//1,2,4,timerStart, timerEnd, success